name: Deploy Bot to VPS

on:
  push:
    branches:
      - master  # or main, whatever you're using
permissions: 
  contents: read
jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3

      - name: Install GitHub CLI
        run: |
          VERSION=$(curl -s https://api.github.com/repos/cli/cli/releases/latest | jq -r .tag_name)
          VERSION="${VERSION#v}"
          ARCH=$(uname -m)
          if [ "$ARCH" = "x86_64" ]; then
            ARCH="amd64"
          elif [ "$ARCH" = "aarch64" ]; then
            ARCH="arm64"
          fi
          curl -fsSL "https://github.com/cli/cli/releases/download/v${VERSION}/gh_${VERSION}_linux_${ARCH}.deb" -o gh.deb
          sudo dpkg -i gh.deb || sudo apt-get install -f -y

      - name: Authenticate gh CLI
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
         gh auth login --with-token <<< "$GH_TOKEN"

      - name: Create deployment
        id: create_deploy
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/${{ github.repository }}/deployments -f ref=${{ github.sha }} -f environment=production -F auto_merge=false > deployment.json
          DEPLOYMENT_ID=$(jq '.id' deployment.json)
          echo "deployment_id=$DEPLOYMENT_ID" >> $GITHUB_OUTPUT

      - name: Mark deployment in progress
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/${{ github.repository }}/deployments/${{ steps.create_deploy.outputs.deployment_id }}/statuses -f state=in_progress

      - name: Deploy to VPS
        run: |
          ssh -T ${{ secrets.VPS_USER }}@${{ secrets.VPS_HOST }} << 'EOF'
            set -e
            export NVM_DIR="$HOME/.nvm"
            [ -s "$NVM_DIR/nvm.sh" ] && \. "$NVM_DIR/nvm.sh"
            nvm use 22
            cd /opt/discord-bot
            git pull origin main
            pnpm install --frozen-lockfile
            sudo systemctl restart discord-bot.service
          EOF

      - name: Mark deployment success
        if: success()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/${{ github.repository }}/deployments/${{ steps.create_deploy.outputs.deployment_id }}/statuses -f state=success

      - name: Mark deployment failure
        if: failure()
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/${{ github.repository }}/deployments/${{ steps.create_deploy.outputs.deployment_id }}/statuses -f state=failure
