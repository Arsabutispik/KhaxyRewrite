name: Deploy

on:
  workflow_run:
    workflows: ["Build & Verify"]
    types:
      - completed

permissions:
  contents: read
  deployments: write

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.16.0'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '10.11.1'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Wait for all check runs to complete
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          COMMIT_SHA: ${{ github.event.workflow_run.head_sha }}
        run: |
          MAX_RETRIES=20
          SLEEP_TIME=10

          for i in $(seq 1 $MAX_RETRIES); do
            statuses=$(gh api repos/${GITHUB_REPOSITORY}/commits/${COMMIT_SHA}/check-runs --jq '.check_runs[].status' | sort | uniq)

            if [[ "$statuses" == "completed" ]]; then
              conclusions=$(gh api repos/${GITHUB_REPOSITORY}/commits/${COMMIT_SHA}/check-runs --jq '.check_runs[].conclusion' | sort | uniq)

              if [[ "$conclusions" == "success" ]]; then
                echo "✅ All check runs completed successfully."
                break
              else
                echo "❌ One or more check runs failed:"
                gh api repos/${GITHUB_REPOSITORY}/commits/${COMMIT_SHA}/check-runs --jq '.check_runs[] | {name: .name, conclusion: .conclusion}'
                exit 1
              fi
            else
              echo "⏳ Check runs in progress: $statuses. Retrying in $SLEEP_TIME seconds..."
              sleep $SLEEP_TIME
            fi
          done

          echo "⏱️ Timed out waiting for check runs."
          exit 1

      - name: Deploy to VPS
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_KEY: ${{ secrets.VPS_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$VPS_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST << EOF
          set -e
          export PATH="/root/.nvm/versions/node/v22.16.0/bin:$PATH"
            cd /opt/discord-bot
            git pull
            pnpm install --frozen-lockfile
            sudo systemctl restart discord-bot.service
          EOF

      - name: Create deployment on GitHub
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo '{
            "ref": "'"${{ github.event.workflow_run.head_sha }}"'",
            "environment": "production",
            "auto_merge": false
          }' | gh api -X POST /repos/Arsabutispik/Khaxy/deployments --input -
