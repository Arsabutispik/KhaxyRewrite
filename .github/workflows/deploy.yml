name: Deploy

on:
  workflow_run:
    workflows: ["Build & Verify"]
    types:
      - completed

permissions:
  contents: read
  deployments: write

jobs:
  wait-for-statuses:
    if: ${{ github.event.workflow_run.conclusion == 'success' }}
    runs-on: ubuntu-latest
    outputs:
      status_passed: ${{ steps.wait-for-status.outputs.status_passed }}

    steps:
      - name: Wait for all required status checks to succeed
        id: wait-for-status
        env:
          REPO: ${{ github.repository }}
          SHA: ${{ github.event.workflow_run.head_sha }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "Waiting for all required status checks to pass for commit $SHA..."
          for i in {1..20}; do
            response=$(gh api repos/$REPO/commits/$SHA/status --silent)
            failed_or_pending=$(echo "$response" | jq -r '.statuses[] | select(.state != "success") | .context' || true)

            if [ -z "$failed_or_pending" ]; then
              echo "::set-output name=status_passed::true"
              echo "All status checks succeeded."
              exit 0
            else
              echo "Waiting... These statuses are not successful yet:"
              echo "$failed_or_pending"
            fi

            sleep 15
          done

          echo "::set-output name=status_passed::false"
          echo "Timed out waiting for status checks to pass."
          exit 1

  deploy:
    needs: wait-for-statuses
    if: needs.wait-for-statuses.outputs.status_passed == 'true'
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '22.16.0'

      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '10.11.1'

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Deploy to VPS
        env:
          VPS_HOST: ${{ secrets.VPS_HOST }}
          VPS_USER: ${{ secrets.VPS_USER }}
          VPS_KEY: ${{ secrets.VPS_KEY }}
        run: |
          mkdir -p ~/.ssh
          echo "$VPS_KEY" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh -i ~/.ssh/id_rsa -o StrictHostKeyChecking=no $VPS_USER@$VPS_HOST << EOF
          set -e
          export PATH="/root/.nvm/versions/node/v22.16.0/bin:$PATH"
            cd /opt/discord-bot
            git pull
            pnpm install --frozen-lockfile
            sudo systemctl restart discord-bot.service
          EOF

      - name: Create deployment on GitHub
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo '{
            "ref": "'"${{ github.event.workflow_run.head_sha }}"'",
            "environment": "production",
            "auto_merge": false
          }' | gh api -X POST /repos/Arsabutispik/Khaxy/deployments --input -
